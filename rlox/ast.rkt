#lang racket/base

;;; Expressions

(struct assign (name value) #:transparent)
(struct binary (op left right) #:transparent)
(struct call (callee paran args) #:transparent)
(struct get (object name) #:transparent)
(struct grouping (expr) #:transparent)
(struct literal (value) #:transparent)
(struct logical (op left right) #:transparent)
(struct set (object name value) #:transparent)
(struct super (keyword method) #:transparent)
(struct this (keyword) #:transparent)
(struct unary (op right) #:transparent)
(struct variable (name) #:transparent)

;;; Statements

(struct block (statements) #:transparent)
(struct class (name superclass methods) #:transparent)
(struct expr (expression) #:transparent)
(struct function (name params body) #:transparent)
(struct if (condition then else) #:transparent)
(struct print (expression) #:transparent)
(struct return (keyword value) #:transparent)
(struct var (name init) #:transparent)
(struct while (condition body) #:transparent)

(provide (struct-out assign)
         (struct-out binary)
         (struct-out call)
         (struct-out get)
         (struct-out grouping)
         (struct-out literal)
         (struct-out logical)
         (struct-out set)
         (struct-out super)
         (struct-out this)
         (struct-out unary)
         (struct-out variable)
         (struct-out block)
         (struct-out class)
         (struct-out expr)
         (struct-out function)
         (struct-out if)
         (struct-out print)
         (struct-out return)
         (struct-out var)
         (struct-out while))
